#!/usr/bin/env python3

import logging
import json
from datetime import datetime

logger: logging.Logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

COLORSCHEME = {
    "background": 0,
    "foreground": 0,
    "cursor": 0,
    "black": 0,
    "red": 1,
    "green": 2,
    "yellow": 3,
    "blue": 4,
    "magenta": 5,
    "cyan": 6,
    "white": 7,
    "brightBlack": 8,
    "brightRed": 9,
    "brightGreen": 10,
    "brightYellow": 11,
    "brightBlue": 12,
    "brightMagenta": 13,
    "brightCyan": 14,
    "brightWhite": 15,
}


def load_json_colorscheme(filename: str) -> dict[str, str]:
    with open(filename) as f:
        scheme = json.loads(f.read())

    if "hex" not in scheme:
        logger.fatal(f"no hex codes are in file {filename}")
        exit(1)

    loaded_colorscheme = {}
    for key in COLORSCHEME:
        color = scheme["hex"].get(key)
        if not color:
            logger.fatal(f"missing color {key} in {filename}")
            exit(2)

        assert color.startswith("#")
        loaded_colorscheme[key] = color

    return loaded_colorscheme


def create_ghostty_colorscheme(colorscheme: dict[str, str]) -> str:
    timestamp = datetime.now()

    output = f"""
# Configuration generated by materialize_colorscheme.py at {timestamp}
# Please use dotfiles/materialize_colorscheme.py to regenerate this file.
background = {colorscheme['background']}
foreground = {colorscheme['foreground']}
cursor-color = {colorscheme['cursor']}
"""
    for key, value in list(colorscheme.items())[3:]:
        i = COLORSCHEME[key]
        logger.info(f"color #{i} ({key}) has hex value {value}")
        output += f"\n# {key}\npalette = {i}={value}\n"

    return output


def run() -> None:
    import os

    colorscheme_path = os.path.abspath("./robpheme.colors")
    logger.warning(
        f"Using cwd as path for colorscheme robpheme.colors: {colorscheme_path}"
    )

    colorscheme = load_json_colorscheme(colorscheme_path)
    logger.info(f"parsed colorscheme from JSON: {colorscheme}")

    logger.warning("Generating ghostty theme from colorscheme...")
    ghostty = create_ghostty_colorscheme(colorscheme)
    logger.warning(f"Ghostty theme materialized:\n{ghostty}")
    with open(os.path.abspath("./ghostty/themes/robpheme"), "w") as gtheme:
        gtheme.write(ghostty)
    logger.info("Wrote Ghostty theme file")


if __name__ == "__main__":
    run()
